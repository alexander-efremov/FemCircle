#include <math.h>#include <stdio.h>#include <string.h>#include <assert.h>#include "consts.h"#include "timer.h"#include "utils.h"#include "common.h"#include "algorithm"using namespace std;inline void print_data_to_files(double *phi, double *density, int tl, int nx, int ny, double hx, double hy, double u,                                double v, double a, double c, double tau) {    print_surface("phi", nx, ny, hx, hy, tl, a, c, get_center_x(), get_center_y(), tau,                  u, v, phi);    print_surface("rho", nx, ny, hx, hy, tl, a, c, get_center_x(), get_center_y(), tau,                  u, v, density);}inline void print_surface_0(const char *filename, int ox_len, int oy_len, int ny3_1, int r,                            double hx, double hy, int t, double a, double c, double x0, double y0,                            double tau, double u, double v, double *data) {    char name[650];    sprintf(name, "%s_nx=%d_ny=%d_hx=%f_hy=%f_t=%d_x0=%f_y0=%f_tau=%f_u=%f_v=%f_a=%f_c=%f.dat",            filename, ox_len + 1, oy_len + 1, hx, hy, t, x0, y0, tau, u, v, a, c);    FILE *file = fopen(name, "w");    fprintf(file, "TITLE = 'DEM DATA | DEM DATA | DEM DATA | DEM DATA'\nVARIABLES = 'x' 'y' %s\nZONE T='SubZone'",            filename);    fprintf(file, "\nI=%d J=%d K=%d ZONETYPE=Ordered", oy_len + 1, ox_len + 1, 1);    fprintf(file, "\nDATAPACKING=POINT\nDT=(SINGLE SINGLE SINGLE)");    for (int i = 0; i < ox_len + 1; i++)        for (int j = 0; j < oy_len + 1; j++)            fprintf(file, "\n%-30.20g  %-30.20g %-30.20g", i * hx, j * hy,                    data[ny3_1 * i * r + j * r]);    fclose(file);}inline static double func_u(double t, double x, double y) { return U; }inline static double func_v(double t, double x, double y) { return V; }inline static double analytical_solution_circle(double t, double x, double y) {    double x0 = get_center_x() + t * func_u(t, x, y);    double y0 = get_center_y() + t * func_v(t, x, y);    double value = (x - x0) * (x - x0) + (y - y0) * (y - y0);    if (value <= R_SQ) return INN_DENSITY;    return OUT_DENSITY;}inline int get_ny3_1(int ny, int max_lvl) {    return (int) (ny * std::pow(3., max_lvl) + 1);}// получаем самый мелкий шагinline void get_hx_hy_smallest(int nx, int ny, int max_lvl, double &hx, double &hy) {    hx = (B - A) / (nx * std::pow(3., max_lvl));    hy = (D - C) / (ny * std::pow(3., max_lvl));}// 1) знаем i-абсолютное, j-абсолютное -> найти lev, hinline void get_hx_hy(int i, int j, int *grid, int nx, int ny, int max_lvl, double &hx, double &hy, int &lev) {    int ny3_1 = get_ny3_1(ny, max_lvl);    lev = grid[i * ny3_1 + j];    hy = (D - C) / (ny * std::pow(3., lev));    hx = (B - A) / (nx * std::pow(3., lev));}// 2) знаем x,y -> найти i-абсолютное, j-абсолютное, lev, hstatic double num_sol_at_point(double *rhoPr, int *gridPr, double x, double y, int max_lvl, int ny, int &lev, int &p,                               int &q) {    if (x < A || x > B || y < C || y > D) {        printf("\nnum_sol_at_point ERROR out if bounds %e %e\n", x, y);        return 0.;    }    assert(lev == 0);    assert(p == 0);    assert(q == 0);    int ny3_1 = get_ny3_1(ny, max_lvl);    do {        double hx = (B - A) / (NX * std::pow(3., lev));        double hy = (D - C) / (NY * std::pow(3., lev));        int coef = (int) std::pow(3, max_lvl - lev);        p = (int) ((x + (hx / 2.)) / hx);        q = (int) ((y + (hy / 2.)) / hy);        int d = gridPr[p * coef * ny3_1 + q * coef];        if (d == lev) { return rhoPr[p * coef * ny3_1 + q * coef]; }        lev++;    } while (lev <= max_lvl);    printf("\nnum_sol_at_point ERROR RHO MINUS ONE %e %e\n", x, y);    return -1.;}static double calc_phi(int ii, int jj, double *rhoPr, double time, int *gridPr, int *grid, int nx, int ny, int nx3,                       int ny3, double tau, int nx_ideal, int ny_ideal, int max_lvl) {    if (grid[ii * (ny3 + 1) + jj] == -1)        return 0.; // эту проверку можно сделать в цикле вызова... Лучше тут, там их будет 9 штук, а тут одна    double hy_lev;    double hx_lev;    int lvl_stub;    get_hx_hy(ii, jj, grid, nx, ny, max_lvl, hx_lev, hy_lev, lvl_stub);    double hx_smallest;    double hy_smallest;    get_hx_hy_smallest(nx, ny, max_lvl, hx_smallest, hy_smallest);    double x1 = 0., y1 = 0., x2 = 0., y2 = 0., x3 = 0., y3 = 0., x4 = 0., y4 = 0.;    get_coordinates_on_curr(ii, jj, x1, y1, x2, y2, x3, y3, x4, y4, hx_smallest, hy_smallest, hx_lev, hy_lev, nx3, ny3);//    printf("POINT: %d   %d :  x1=%.8le * y1=%.8le ** x2=%.8le * y2=%.8le ** x3=%.8le * y3=%.8le **//                   x4=%.8le * y4=%.8le\n", ii,jj, x1,y1, x2,y2, x3,y3, x4,y4);    double u = func_u(time, x1, y1);    double v = func_v(time, x1, y1);    x1 = x1 - tau * u;    y1 = y1 - tau * v;    u = func_u(time, x2, y2);    v = func_v(time, x2, y2);    x2 = x2 - tau * u;    y2 = y2 - tau * v;    u = func_u(time, x3, y3);    v = func_v(time, x3, y3);    x3 = x3 - tau * u;    y3 = y3 - tau * v;    u = func_u(time, x4, y4);    v = func_v(time, x4, y4);    x4 = x4 - tau * u;    y4 = y4 - tau * v;    /*     if (x1 <= A || x1 >= B || x2 <= A || x2 >= B || x3 <= A || x3 >= B || x4 <= A || x4 >= B        || y1 <= C || y1 >= D || y2 <= C || y2 >= D || y3 <= C || y3 >= D || y4 <= C || y4 >= D)        printf("PREV Time level %.8le! ERROR INDEX i=%d j=%d : x1=%.8le * y1=%.8le ** x2=%.8le * y2=%.8le ** x3=%.8le * y3=%.8le ** "                       "x4=%.8le * y4=%.8le\n ", time, ii, jj, x1, y1, x2, y2, x3, y3, x4, y4);*/    double x_step = 1. / nx_ideal;    double y_step = 1. / ny_ideal;    double mes = x_step * y_step;    double phi = 0.;    for (int i = 0; i < nx_ideal; ++i) {        for (int j = 0; j < ny_ideal; ++j) {            double ideal_x = i * x_step + x_step / 2.;            double ideal_y = j * y_step + y_step / 2.;            double real_x = x1 + (x2 - x1) * ideal_x + (x4 - x1) * ideal_y                            + (x1 + x3 - x2 - x4) * ideal_x * ideal_y;            double real_y = y1 + (y2 - y1) * ideal_x + (y4 - y1) * ideal_y                            + (y1 + y3 - y2 - y4) * ideal_x * ideal_y;            double a11 = (x2 - x1) + (x1 + x3 - x2 - x4) * ideal_y;            double a12 = (x4 - x1) + (x1 + x3 - x2 - x4) * ideal_x;            double a21 = (y2 - y1) + (y1 + y3 - y2 - y4) * ideal_y;            double a22 = (y4 - y1) + (y1 + y3 - y2 - y4) * ideal_x;            double jakob = a11 * a22 - a21 * a12;            int lev = 0, p = 0, q = 0;            double dens = num_sol_at_point(rhoPr, gridPr, real_x, real_y, max_lvl, ny, lev, p, q);            phi += mes * dens * jakob;        }    }    return fabs(phi) < fabs(DBL_MIN_TRIM) ? 0. : phi;}static double get_numeric_solution(double x, double y, double hx, double hy) {    return 0.; // !!!!!!!!!!!!!!!!!!!!!!!}static void grid_vert_checking(int lx, int rx, int by, int uy, int lev, int *grid, double *density);static void grid_hor_checking(int lx, int rx, int by, int uy, int lev, int *grid, double *density);static void grid_hor_refine(int ii, int jj, int lev, int *grid, double *rho) {    int coef = std::pow(3., R_LVL - lev);    int coefNew = std::pow(3., R_LVL - lev + 1);    // a) если обе окрестности еще ни разу не мельчились    if (grid[ii * coef * NY3_1 + jj * coef] == lev && grid[(ii + 1) * coef * NY3_1 + jj * coef] == lev) {        // изменим обе окрестности        for (int p = -1; p < 2; ++p) { // p = -1, 0, 1            for (int q = -1; q < 5; ++q) { // q = -1, 0, 1, 2, 3, 4                int i = (3 * ii + p) * NY3_1 * coefNew + (3 * jj + q) * coefNew;                grid[i] = lev + 1; // изменим сетку                double currHx = (B - A) / (NX * std::pow(3., lev + 1));                double currHy = (D - C) / (NX * std::pow(3., lev + 1));                double x = (3 * ii + p) * coefNew * currHx;                double y = (3 * jj + q) * coefNew * currHy;                rho[i] = get_numeric_solution(x, y, currHx, currHy); // вычислим значение            }        }        // осуществим проверку для вновь созданных ячеек (окрестностей)        grid_vert_checking((3 * ii - 1) * coefNew, (3 * ii + 4) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 1) *                                                                                                   coefNew, lev + 1,                           grid, rho);        grid_hor_checking((3 * ii - 1) * coefNew, (3 * ii + 4) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 1) *                                                                                                  coefNew, lev + 1,                          grid, rho);        return;    } // если обе окрестности еще ни разу не мельчились    // б) сетки уже адаптированные. Просто переходим на проверку на более низком уровне    if (grid[ii * coef * NY3_1 + jj * coef] != lev && grid[(ii + 1) * coef * NY3_1 + jj * coef] != lev) {        grid_vert_checking((3 * ii - 1) * coefNew, (3 * ii + 4) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 1) *                                                                                                   coefNew, lev + 1,                           grid, rho);        grid_hor_checking((3 * ii - 1) * coefNew, (3 * ii + 4) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 1) *                                                                                                  coefNew, lev + 1,                          grid, rho);        return;    } // сетки уже адаптированные. Просто переходим на проверку на более низком уровне    // в) одна из сеток не была адаптирована    if (grid[ii * coef * NY3_1 + jj * coef] == lev || grid[(ii + 1) * coef * NY3_1 + jj * coef] == lev) {        int ii_ad = 0;        if (grid[ii * coef * NY3_1 + jj * coef] == lev) {            ii_ad = ii;        }        else {            ii_ad = ii + 1;        }        // теперь мельчим нужную окрестность        for (int p = -1; p < 2; ++p) { // p = -1, 0, 1            for (int q = -1; q < 2; ++q) { // q = -1, 0, 1                int i = (3 * ii_ad + p) * NY3_1 * coefNew + (3 * jj + q) * coefNew;                grid[i] = lev + 1;                double currHx = (B - A) / (NX * std::pow(3., lev + 1));                double currHy = (D - C) / (NX * std::pow(3., lev + 1));                double x = (3 * ii_ad + p) * coefNew * currHx;                double y = (3 * jj + q) * coefNew * currHy;                rho[i] = get_numeric_solution(x, y, currHx, currHy); // вычислим значение            }        }        // осуществим проверку для вновь созданных ячеек (окрестностей)        grid_vert_checking((3 * ii - 1) * coefNew, (3 * ii + 1) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 4) *                                                                                                   coefNew,                           lev + 1, grid, rho);        grid_hor_checking((3 * ii - 1) * coefNew, (3 * ii + 1) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 4) *                                                                                                  coefNew,                          lev + 1, grid, rho);        return;    } // одна из сеток не была адаптирована}static void grid_vert_refine(int ii, int jj, int lev, int *grid, double *density) {    int coef = (int) std::pow(3., R_LVL - lev);    int coefNew = (int) std::pow(3., R_LVL - lev + 1);    // a) если обе окрестности еще ни разу не мельчились    if (grid[ii * coef * NY3_1 + jj * coef] == lev && grid[ii * coef * NY3_1 + (jj + 1) * coef] == lev) {        // изменим обе окрестности        for (int p = -1; p < 2; ++p) { // p = -1, 0, 1            for (int q = -1; q < 5; ++q) { // q = -1, 0, 1, 2, 3, 4                int i = (3 * ii + p) * NY3_1 * coefNew + (3 * jj + q) * coefNew;                grid[i] = lev + 1; // изменим сетку                double currHx = (B - A) / (NX * std::pow(3., lev + 1));                double currHy = (D - C) / (NX * std::pow(3., lev + 1));                double x = (3 * ii + p) * coefNew * currHx;                double y = (3 * jj + q) * coefNew * currHy;                density[i] = get_numeric_solution(x, y, currHx, currHy); // вычислим значение            }        }        // осуществим проверку для вновь созданных ячеек (окрестностей)        grid_vert_checking((3 * ii - 1) * coefNew, (3 * ii + 1) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 4) *                                                                                                   coefNew,                           lev + 1, grid, density);        grid_hor_checking((3 * ii - 1) * coefNew, (3 * ii + 1) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 4) *                                                                                                  coefNew,                          lev + 1, grid, density);        return;    } // если обе окрестности еще ни разу не мельчились    // б) сетки уже адаптированные. Просто переходим на проверку на более низком уровне    if (grid[ii * coef * NY3_1 + jj * coef] != lev && grid[ii * coef * NY3_1 + (jj + 1) * coef] != lev) {        grid_vert_checking((3 * ii - 1) * coefNew, (3 * ii + 1) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 4) *                                                                                                   coefNew,                           lev + 1, grid, density);        grid_hor_checking((3 * ii - 1) * coefNew, (3 * ii + 1) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 4) *                                                                                                  coefNew,                          lev + 1, grid, density);        return;    } // сетки уже адаптированные. Просто переходим на проверку на более низком уровне    // в) одна из сеток не была адаптирована    if (grid[ii * coef * NY3_1 + jj * coef] == lev || grid[ii * coef * NY3_1 + (jj + 1) * coef] == lev) {        int jj_ad = 0;        if (grid[ii * coef * NY3_1 + jj * coef] == lev) {            jj_ad = jj;        }        else {            jj_ad = jj + 1;        }        // теперь мельчим нужную окрестность        for (int p = -1; p < 2; ++p) { // p = -1, 0, 1            for (int q = -1; q < 2; ++q) { // q = -1, 0, 1                int i = (ii + p) * NY3_1 * coefNew + (jj_ad + q) * coefNew;                grid[i] = lev + 1;                double currHx = (B - A) / (NX * std::pow(3., lev + 1));                double currHy = (D - C) / (NX * std::pow(3., lev + 1));                double x = (ii + p) * coefNew * currHx;                double y = (jj_ad + q) * coefNew * currHy;                density[i] = get_numeric_solution(x, y, currHx, currHy); // вычислим значение            }        }        // осуществим проверку для вновь созданных ячеек (окрестностей)        grid_vert_checking((3 * ii - 1) * coefNew, (3 * ii + 1) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 4) *                                                                                                   coefNew,                           lev + 1, grid, density);        grid_hor_checking((3 * ii - 1) * coefNew, (3 * ii + 1) * coefNew, (3 * jj - 1) * coefNew, (3 * jj + 4) *                                                                                                  coefNew,                          lev + 1, grid, density);        return;    } // одна из сеток не была адаптирована} // конец grid_vert_refinestatic void grid_vert_checking(int lx, int rx, int by, int uy, int lev, int *grid, double *density) {    if (lev >= R_LVL) return;    int coef = (int) std::pow(3., R_LVL - lev);    for (int i = lx; i < rx + 1; ++i) {        for (int j = by; j < uy; ++j) {            if (std::abs(density[i * coef * NY3_1 + coef] - density[i * coef * NY3_1 + (j + 1) * coef]) >                RES_EPS) {                grid_vert_refine(i, j, lev, grid, density);            }        }    }}static void grid_hor_checking(int lx, int rx, int by, int uy, int lev, int *grid, double *density) {    if (lev >= R_LVL) return;    int coef = (int) std::pow(3., R_LVL - lev);    for (int j = by; j < uy + 1; ++j) {        for (int i = lx; i < rx; ++i) {            if (std::abs(density[i * coef * NY3_1 + coef] - density[(i + 1) * coef * NY3_1 + j * coef]) >                RES_EPS) {                grid_hor_refine(i, j, lev, grid, density);            }        }    }}double *solve_9(double &tme, int *grid, int *gridPr) {    StartTimer();    fflush(stdout);    double *phi = new double[XY];    double *rhoPr = new double[XY];    double *rho = new double[XY];    //<editor-fold desc="Init data">    for (int i = 0; i < XY; ++i) {        grid[i] = -1;        gridPr[i] = -1;        rho[i] = -1.;        rhoPr[i] = -1.;        phi[i] = 0.;    }    for (int i = 0; i < NX_1; ++i) {        for (int j = 0; j < NY_1; ++j) {            grid[NY3_1 * i * R + j * R] = 0;            gridPr[NY3_1 * i * R + j * R] = 0;        }    }    for (int i = 0; i < NX_1; ++i) // G1 -- (x_i, 0=C) -- bottom boundary        rhoPr[NY3_1 * i * R] = analytical_solution_circle(0., A + HX * i, C);    for (int j = 1; j < NY; ++j) // G2 -- (NX=B, y_j) -- right boundary        rhoPr[NY3_1 * NX3 + j * R] = analytical_solution_circle(0., A + HX * NX, C + HY * j);    for (int i = 0; i < NX_1; ++i) // G3 -- (x_i, NY=D) -- top boundary        rhoPr[NY3_1 * i * R + NY3] = analytical_solution_circle(0., A + HX * i, C + HY * NY);    for (int j = 1; j < NY; ++j) // G4 -- (0=A, y_j) -- left boundary        rhoPr[j * R] = analytical_solution_circle(0., A, C + HY * j);    memcpy(rho, rhoPr, XY * sizeof(double));    for (int i = 1; i < NX; ++i) // inner points        for (int j = 1; j < NY; ++j)            rhoPr[NY3_1 * i * R + j * R] = analytical_solution_circle(0., A + HX * i, C + HY * j);    //</editor-fold>    printf("SUM RHO INIT = %le\n", calc_array_sum(rhoPr, NX_1, NY_1, 0));    printf("SUM ABS RHO INIT= %le\n", calc_array_sum(rhoPr, NX_1, NY_1, 1));    fflush(stdout);    for (int tl = 1; tl <= TIME_STEP_CNT; tl++) {        for (int i = 1; i < NX3; ++i) // G1 -- (x_i, 0=C) -- bottom boundary        {            if (G1[i] == 1) {                phi[NY3_1 * i] = calc_phi(i, 0, rhoPr, TAU * tl, gridPr, grid, NX, NY, NX3, NY3, TAU,                                          IDEAL_SQ_SIZE_X, IDEAL_SQ_SIZE_Y, R_LVL);            }        }        for (int j = 1; j < NY3; ++j) // G2 -- (NX=B, y_j) -- right boundary        {            if (G2[j] == 1) {                phi[NY3_1 * NX3 + j] = calc_phi(NX, j, rhoPr, TAU * tl, gridPr, grid, NX, NY, NX3, NY3, TAU,                                                IDEAL_SQ_SIZE_X, IDEAL_SQ_SIZE_Y, R_LVL);            }        }        for (int i = 1; i < NX3; ++i) // G3 -- (x_i, NY=D) -- top boundary        {            if (G3[i] == 1) {                phi[NY3_1 * i + NY3] = calc_phi(i, NY, rhoPr, TAU * tl, gridPr, grid, NX, NY, NX3, NY3, TAU,                                                IDEAL_SQ_SIZE_X, IDEAL_SQ_SIZE_Y, R_LVL);            }        }        for (int j = 1; j < NY3; ++j) // G4 -- (0=A, y_j) -- left boundary        {            if (G4[j] == 1) {                phi[j] = calc_phi(0, j, rhoPr, TAU * tl, gridPr, grid, NX, NY, NX3, NY3, TAU, IDEAL_SQ_SIZE_X,                                  IDEAL_SQ_SIZE_Y, R_LVL);            }        }        if (CP00 == 1) {            phi[0] = calc_phi(0, 0, rhoPr, TAU * tl, grid, grid, NX, NY, NX3, NY3, TAU, IDEAL_SQ_SIZE_X,                              IDEAL_SQ_SIZE_Y, R_LVL); // point (0.0)        }        if (CP10 == 1) {            phi[NY3_1 * NX3] = calc_phi(NX, 0, rhoPr, TAU * tl, gridPr, grid, NX, NY, NX3, NY3, TAU,                                        IDEAL_SQ_SIZE_X, IDEAL_SQ_SIZE_Y, R_LVL); // point (1.0)        }        if (CP01 == 1) {            phi[NY3] = calc_phi(0, NY, rhoPr, TAU * tl, grid, grid, NX, NY, NX3, NY3, TAU, IDEAL_SQ_SIZE_X,                                IDEAL_SQ_SIZE_Y, R_LVL); // point (0.1)        }        if (CP11 == 1) {            phi[NY3_1 * NX3 + NY3] = calc_phi(NX, NY, rhoPr, TAU * tl, gridPr, grid, NX, NY, NX3, NY3, TAU,                                              IDEAL_SQ_SIZE_X, IDEAL_SQ_SIZE_Y, R_LVL); // point (1,1)        }        for (int i = 1; i < NX3; ++i) // inner points        {            for (int j = 1; j < NY3; ++j) {                phi[NY3_1 * i + j] = calc_phi(i, j, rhoPr, TAU * tl, gridPr, grid, NX, NY, NX3, NY3, TAU,                                              IDEAL_SQ_SIZE_X, IDEAL_SQ_SIZE_Y, R_LVL);            }        }        // ???????? Как понять какой уровень верный? lev        double rpCoef = 2. / (HX * HY); // ШАГИ ДЛЯ УРОВНЯ ЛЕВ !!!!!!!!!!        for (int i = 1; i < NX3; ++i) // G1 -- (x_i, 0=C) -- bottom boundary            if (G1[i] == 1) {                rho[NY3_1 * i] = rpCoef * phi[NY3_1 * i];                if (fabs(rho[NY3_1 * i]) < fabs(DBL_MIN_TRIM)) rho[NY3_1 * i] = 0.;            }        for (int j = 1; j < NY3; ++j) // G2 -- (NX=B, y_j) -- right boundary            if (G2[j] == 1) {                rho[NY3_1 * NX3 + j] = rpCoef * phi[NY3_1 * NX3 + j];                if (fabs(rho[NY3_1 * NX3 + j]) < fabs(DBL_MIN_TRIM)) rho[NY3_1 * NX3 + j] = 0.;            }        for (int i = 1; i < NX3; ++i) // G3 -- (x_i, NY=D) -- top boundary            if (G3[i] == 1) {                rho[NY3_1 * i + NY3] = rpCoef * phi[NY3_1 * i + NY3];                if (fabs(rho[NY3_1 * i + NY3]) < fabs(DBL_MIN_TRIM)) rho[NY3_1 * i + NY3] = 0.;            }        for (int j = 1; j < NY3; ++j) // G4 -- (0=A, y_j) -- left boundary            if (G4[j] == 1) {                rho[j] = rpCoef * phi[j];                if (fabs(rho[j]) < fabs(DBL_MIN_TRIM)) rho[j] = 0.;            }        rpCoef = 4. / (HX * HY);        if (CP00 == 1) { // point (0,0)            rho[0] = rpCoef * phi[0];            if (fabs(rho[0]) < fabs(DBL_MIN_TRIM)) rho[0] = 0.;        }        if (CP10 == 1) { // point (1,0)            rho[NY3_1 * NX3] = rpCoef * phi[NY3_1 * NX3];            if (fabs(rho[NY3_1 * NX3]) < fabs(DBL_MIN_TRIM)) rho[NY3_1 * NX3] = 0.;        }        if (CP01 == 1) { // point (0,1)            rho[NY3] = rpCoef * phi[NY3];            if (fabs(rho[NY3]) < fabs(DBL_MIN_TRIM)) rho[NY3] = 0.;        }        if (CP11 == 1) { // point (1,1)            rho[NY3_1 * NX3 + NY3] = rpCoef * phi[NY3_1 * NX3 + NY3];            if (fabs(rho[NY3_1 * NX3 + NY3]) < fabs(DBL_MIN_TRIM)) rho[NY3_1 * NX3 + NY3] = 0.;        }        rpCoef = 1. / (HX * HY);        for (int i = 1; i < NX3; ++i)            for (int j = 1; j < NY3; ++j) {                rho[NY3_1 * i + j] = rpCoef * phi[NY3_1 * i + j];                if (fabs(rho[NY3_1 * i + j]) < fabs(DBL_MIN_TRIM)) rho[NY3_1 * i + j] = 0.;            }        memcpy(rhoPr, rho, XY * sizeof(double));        memcpy(gridPr, grid, XY * sizeof(int));//        grid_vert_checking(0, NX, 0, NY, 0, grid, rho);//        grid_hor_checking(0, NX, 0, NY, 0, grid, rho);        if (tl % 1 == 0) {            print_surface_0("phi", NX, NY, NY3_1, R, HX, HY, tl, A, C, get_center_x(), get_center_y(), TAU, U, V, phi);        }    } // time loop    delete[] rhoPr;    delete[] phi;    tme = GetTimer() / 1000;    return rho;}double *calc_error_9(double hx, double hy, double tt, double *solution, int nx, int ny) {    double *res = new double[XY];    for (int i = 0; i < nx; i++)        for (int j = 0; j < ny; j++)            res[i * ny + j] = fabs(solution[i * ny + j]                                   - analytical_solution_circle(tt, A + hx * i, C + hy * j));    return res;}double *get_exact_solution_9(double hx, double hy, double t, int nx, int ny) {    double *res = new double[nx * ny];    for (int i = 0; i < nx; i++)        for (int j = 0; j < ny; j++)            res[i * ny + j] = fabs(analytical_solution_circle(t, A + hx * i, C + hy * j));    return res;}